{
	"info": {
		"_postman_id": "46702438-3d37-4b02-8af7-3e9913931fea",
		"name": "Simple version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33840972",
		"_collection_link": "https://geeksal.postman.co/workspace/GroceryStore~2bd29215-4156-4afe-8f0f-cdc1952838ac/collection/33840972-46702438-3d37-4b02-8af7-3e9913931fea?action=share&source=collection_link&creator=33840972"
	},
	"item": [
		{
			"name": "simple version sorting",
			"item": [
				{
					"name": "Sort by price: Cheap-Expensive Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){\r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&sort=price-asc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"        const ordinaryprices = [];\r",
									"        const allPrices = [];\r",
									"        for(let i = 0; i < responseData.results.length; i++){ \r",
									"            var ordinaryPrice = (responseData.results[i].priceValue);\r",
									"            var promotion = (responseData.results[i].potentialPromotions[0]);\r",
									"            ordinaryprices.push(ordinaryPrice);\r",
									"\r",
									"            if (promotion !== undefined) {\r",
									"                var promotionValue = promotion.price.value;\r",
									"                allPrices.push(promotionValue);\r",
									"            } else {\r",
									"                allPrices.push(ordinaryPrice);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        let allPricesSorted = JSON.stringify(allPrices.sort((a, b) => a - b));\r",
									"        let isOrdered = JSON.stringify(allPrices) === allPricesSorted; \r",
									"        let orderedProducts = JSON.stringify(ordinaryprices.sort((a, b) => a - b));\r",
									"        let ordinaryOrdered = JSON.stringify(ordinaryprices) === orderedProducts;\r",
									"\r",
									"        if (isOrdered) {\r",
									"            pm.test('The productList is in ascending order due to promotionprices', function () {\r",
									"                pm.expect(isOrdered).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test('The productList is in ascending order', function () {\r",
									"                pm.expect(ordinaryOrdered).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by price: Expensive-Cheap Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){\r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&sort=price-desc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"        const ordinaryprices = [];\r",
									"        const allPrices = [];\r",
									"        for(let i = 0; i < responseData.results.length; i++){ \r",
									"            var ordinaryPrice = (responseData.results[i].priceValue);\r",
									"            var promotion = (responseData.results[i].potentialPromotions[0]);\r",
									"            ordinaryprices.push(ordinaryPrice);\r",
									"\r",
									"            if (promotion !== undefined) {\r",
									"                var promotionValue = promotion.price.value;\r",
									"                allPrices.push(promotionValue);\r",
									"            } else {\r",
									"                allPrices.push(ordinaryPrice);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        let allPricesSorted = JSON.stringify(allPrices.sort((a, b) => a - b).reverse());\r",
									"        let isOrdered = JSON.stringify(allPrices) === allPricesSorted; \r",
									"        let orderedProducts = JSON.stringify(ordinaryprices.sort((a, b) => a - b).reverse());\r",
									"        let ordinaryOrdered = JSON.stringify(ordinaryprices) === orderedProducts;\r",
									"\r",
									"        if (isOrdered) {\r",
									"            pm.test('The productList is in ascending order due to promotionprices', function () {\r",
									"                pm.expect(isOrdered).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test('The productList is in ascending order', function () {\r",
									"                pm.expect(ordinaryOrdered).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by compareprice: Cheap-Expensive Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){\r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&sort=compareprice-asc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"\r",
									"        const ordinaryprices = [];\r",
									"        const allPrices = [];\r",
									"        for(let i = 0; i < responseData.results.length; i++){ \r",
									"            var ordinaryPrice = (responseData.results[i].comparePrice.slice(0,5));\r",
									"            var promotion = (responseData.results[i].potentialPromotions[0]);\r",
									"            const comparePrice = parseFloat(ordinaryprices)\r",
									"            ordinaryprices.push(comparePrice);\r",
									"\r",
									"            if (promotion !== undefined) {\r",
									"                var promotionValue = promotion.price.comparePrice.slice(0,5);\r",
									"                const comparePromotion = parseFloat(promotionValue)\r",
									"                allPrices.push(comparePromotion);\r",
									"            } else {\r",
									"                allPrices.push(comparePrice);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        let allPricesSorted = JSON.stringify(allPrices.sort((a, b) => a - b));\r",
									"        let isOrdered = JSON.stringify(allPrices) === allPricesSorted; \r",
									"        let orderedProducts = JSON.stringify(ordinaryprices.sort((a, b) => a - b));\r",
									"        let ordinaryOrdered = JSON.stringify(ordinaryprices) === orderedProducts;\r",
									"\r",
									"        if (isOrdered) {\r",
									"            pm.test('The productList is in compareprice ascending order due to promotionprices', function () {\r",
									"                pm.expect(isOrdered).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test('The productList is in compareprice ascending order', function () {\r",
									"                pm.expect(ordinaryOrdered).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by compareprice: Expensive-Cheap Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){\r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&sort=compareprice-desc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"        const ordinaryprices = [];\r",
									"        const allPrices = [];\r",
									"        for(let i = 0; i < responseData.results.length; i++){ \r",
									"            //var ordinaryPrice = (responseData.results[i].comparePrice.slice(0,5));\r",
									"       \r",
									"         \r",
									"            var promotion = (responseData.results[i].potentialPromotions[0]);\r",
									"            const comparePrice = parseFloat(ordinaryprices)\r",
									"            ordinaryprices.push(comparePrice);\r",
									"\r",
									"            if (promotion !== undefined) {\r",
									"                var promotionValue = promotion.price.comparePrice.slice(0,5);\r",
									"                const comparePromotion = parseFloat(promotionValue)\r",
									"                allPrices.push(comparePromotion);\r",
									"            } else {\r",
									"                allPrices.push(comparePrice);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        let allPricesSorted = JSON.stringify(allPrices.sort((a, b) => a - b).reverse());\r",
									"        let isOrdered = JSON.stringify(allPrices) === allPricesSorted; \r",
									"        let orderedProducts = JSON.stringify(ordinaryprices.sort((a, b) => a - b).reverse());\r",
									"        let ordinaryOrdered = JSON.stringify(ordinaryprices) === orderedProducts;\r",
									"\r",
									"        if (isOrdered) {\r",
									"            pm.test('The productList is in compareprice descending order due to promotionprices', function () {\r",
									"                pm.expect(isOrdered).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test('The productList is in compareprice descending order', function () {\r",
									"                pm.expect(ordinaryOrdered).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by name: A-Ö Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){    \r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=1000&page=0&sort=name-asc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"        let original = responseData.results.map(item => item.name.toLowerCase());\r",
									"        let ourSort = [...original].toSorted((a, b) => a - b)\r",
									"        let isOrdered = JSON.stringify(ourSort) === JSON.stringify(original);\r",
									"        let difference = []\r",
									"\r",
									"        for(let j=0; j<original.length; j++){\r",
									"            if (ourSort[j] !== original[j]) {\r",
									"                difference.push(j, \" orginalet: \" + original[j], \" vår sortering: \"+ ourSort[j]);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.test('The productList is in ascending order due to name', function () {\r",
									"            if(!isOrdered){\r",
									"                console.log(\"endpoint: \", categories[i])\r",
									"                console.log(difference)\r",
									"            }\r",
									"            pm.expect(isOrdered).to.be.true;\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by name: Ö-A Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"function getAllCategories(children, categoryUrls=[]){\r",
									"    for(let child of children){\r",
									"        categoryUrls.push(child.url);\r",
									"    }\r",
									"    return categoryUrls;\r",
									"}\r",
									"\r",
									"let categories = getAllCategories(responseData.children);\r",
									"\r",
									"for(let i=0; i<categories.length; i++){    \r",
									"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=1000&page=0&sort=name-desc`, (error, response) => {\r",
									"        let responseData = response.json(); \r",
									"        let original = responseData.results.map(item => item.name.toLowerCase());\r",
									"        const names = [];\r",
									"        for(var x = 0; x<responseData.results.length;x++){\r",
									"            names.push(responseData.results[x].name.toLowerCase());\r",
									"        }\r",
									"        var ourSort = names.sort().reverse();\r",
									"        let isOrdered = JSON.stringify(ourSort) === JSON.stringify(original.sort().reverse());\r",
									"        let difference = []\r",
									"\r",
									"        for(let j=0; j<original.length; j++){\r",
									"            if (ourSort[j] !== original[j]) {\r",
									"                difference.push(j, \" orginalet: \" + original[j], \" vår sortering: \"+ ourSort[j]);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.test('The productList is in descending order due to name', function () {\r",
									"            if(!isOrdered){\r",
									"                console.log(\"endpoint: \", categories[i])\r",
									"                console.log(difference)\r",
									"            }\r",
									"            pm.expect(isOrdered).to.be.true;\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/leftMenu/categorytree",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pagination Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"function getAllCategories(children, categoryUrls=[]){\r",
							"    for(let child of children){\r",
							"        categoryUrls.push(child.url);\r",
							"    }\r",
							"    return categoryUrls;\r",
							"}\r",
							"let categories = getAllCategories(responseData.children);\r",
							"\r",
							"for(let i=0; i<categories.length; i++){\r",
							"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&sort=price-asc`, (error, response) => { \r",
							"        pm.test(\"Correct number of results per page\", function () {\r",
							"            const resultsPerPage = 31;\r",
							"            const jsonData = response.json();\r",
							"            const results = jsonData.results.length;\r",
							"            pm.expect(results).lessThan(resultsPerPage);\r",
							"        }); \r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/leftMenu/categorytree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visibility in productList Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"function getAllCategories(children, categoryUrls=[]){\r",
							"    for(let child of children){\r",
							"        categoryUrls.push(child.url);\r",
							"\r",
							"    }\r",
							"    return categoryUrls;\r",
							"}\r",
							"let categories = getAllCategories(responseData.children);\r",
							"\r",
							"for(let i=0; i<categories.length; i++){\r",
							"    //This category comes out empty 14/11-24\r",
							"    if(categories[i].includes(\"kiosk\")){\r",
							"        continue;\r",
							"    } \r",
							"    pm.sendRequest(`http://localhost:4000/api/c/${categories[i]}?size=30&page=0&=topRated`, (error, response) => { \r",
							"        console.log(\"Endpoint: \" + categories[i])\r",
							"            let responseData = response.json();\r",
							"            for(i=0; i<responseData.results.length; i++){\r",
							"                const price = responseData.results[i].price\r",
							"                const name = responseData.results[i].name\r",
							"                const image = responseData.results[i].image.url\r",
							"                if(price.length<1 || name.length<1|| image.length<1){\r",
							"                    console.log(\"FAILURE!\")\r",
							"                    console.log(\"price: \" + price.length);\r",
							"                    console.log(\"name: \" + name.length);\r",
							"                    console.log(\"image: \" + image.length);\r",
							"                }\r",
							"            pm.test(\"Check if productlist show a name, price and picture\", function () {\r",
							"                pm.expect(price.length).to.be.greaterThan(0)\r",
							"                pm.expect(name.length).to.be.greaterThan(0)\r",
							"                pm.expect(image.length).to.be.greaterThan(0)\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/leftMenu/categorytree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		}
	]
}