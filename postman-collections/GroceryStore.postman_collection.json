{
	"info": {
		"_postman_id": "0f1c6fa7-f07f-4266-814c-7b19ef343e5f",
		"name": "GroceryStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33840972",
		"_collection_link": "https://geeksal.postman.co/workspace/GroceryStore~2bd29215-4156-4afe-8f0f-cdc1952838ac/collection/33841427-0f1c6fa7-f07f-4266-814c-7b19ef343e5f?action=share&source=collection_link&creator=33840972"
	},
	"item": [
		{
			"name": "Get All",  
			"item": [
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the data   from the response unpacked from json",
									"let responseData = pm.response.json();",
									"function getAllCategories(children, categoryUrls=[]){",
									"    for(let child of children){",
									"        categoryUrls.push(child.url)",
									"        if(child.children.length===0){",
									"            continue;",
									"        }",
									"        getAllCategories(child.children, categoryUrls)",
									"",
									"    }",
									"    return categoryUrls;",
									"}",
									"let categories = getAllCategories(responseData.children)",
									"console.log(categories)",
									"",
									"// Check that the status code is 200 (OK)",
									"pm.test('The status code of the response should be 200', () => {",
									"  pm.expect(pm.response).to.have.status(200);",
									"});",
									"",
									"// Check that we have a response time of < 1 second",
									"pm.test('The response time should be below 2 second', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"})",
									"",
									"// Check that there are at least 10 main categories (children)",
									"pm.test('There should be at least 10 main categories', () => {",
									"  pm.expect(responseData.children.length).to.be.at.least(10);",
									"});",
									"",
									"// Check that each main category has the properites title and url",
									"pm.test('Each main category should have the properties title and url', () => {",
									"    for(let category of responseData.children){",
									"        // an empty string is falsy -> convert to false using !!",
									"        // a string with content is truthy -> convert to true using !!",
									"        pm.expect(!!category.title).to.be.true;",
									"        pm.expect(!!category.url).to.be.true;",
									"        // check that datatype is string for both title and url",
									"        pm.expect(category.title).to.be.string;",
									"        pm.expect(category.url).to.be.string;",
									"    }",
									"});",
									"",
									"// Save the responseData as an environment variable",
									"pm.variables.set('categoryData', responseData);",
									"",
									"// A counter for products within a main category to fecth",
									"pm.variables.set('categoryCounter', 0);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the domain",
									"pm.environment.set('domain', 'http://localhost:4000')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/leftMenu/categorytree",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"leftMenu",
								"categorytree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get productlist within category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Unpack from JSON all the categories",
									"let categories = pm.variables.get('categoryData');",
									"// Get the category counter and convert to number (using +)",
									"let categoryCounter = pm.variables.get('categoryCounter');",
									"",
									"// Get the category part of the url and set it as an environment variable",
									"let urlCategoryPart = categories.children[categoryCounter].url;",
									"pm.environment.set('urlCategoryPart',urlCategoryPart);",
									"",
									"// Add 1 to the categoryCounter environment variable",
									"pm.variables.set('categoryCounter', categoryCounter + 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Unpack from JSON all the categories",
									"let categories = pm.variables.get('categoryData');",
									"// Get the category counter and convert to number (using +)",
									"let categoryCounter = pm.variables.get('categoryCounter');",
									"",
									"// Tests",
									"",
									"// Check that the status code is 200 (OK)",
									"pm.test('The status code of the response should be 200', () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Check that we have a response time of < 1 second",
									"pm.test('The response time should be below 1 second', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Check that we have at least one product in the this main category",
									"let responseData = pm.response.json();",
									"pm.test('There should be at least one product in a main category', () => {",
									"    pm.expect(responseData.results.length).to.be.at.least(1);",
									"});",
									"",
									"",
									"// Repeat/loop this request until we have requested all main categories",
									"if(categories.children[categoryCounter]){",
									"  // Repeat this request (with new variable data for the url)",
									"  pm.execution.setNextRequest('Get productlist within category');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"c",
								"{{urlCategoryPart}}"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Head categories",
			"item": [
				{
					"name": "Fruit and veggies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/c/frukt-och-gront?size=30&page=0&sort=topRated",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"c",
								"frukt-och-gront"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Meat, charcuterie and poultry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"});  \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/kott-chark-och-fagel?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"kott-chark-och-fagel"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dairy, cheese and egg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/mejeri-ost-och-agg?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"mejeri-ost-och-agg"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pantry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/skafferi?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"skafferi"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deepfrozen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/fryst?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"fryst"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fish  and seafood",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/fisk-och-skaldjur?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"fisk-och-skaldjur"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vegetarian",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/vegetariskt?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"vegetariskt"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ice cream, candy and snacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/glass-godis-och-snacks?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"glass-godis-och-snacks"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/dryck?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"dryck"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conveniencefood",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/fardigmat?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"fardigmat"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Kids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/barn?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"barn"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Flowers and garden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/blommor-och-tradgard?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"blommor-och-tradgard"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Home and cleaning",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/hem-och-stad?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"hem-och-stad"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Health and beauty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/halsa-och-skonhet?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"halsa-och-skonhet"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pharmacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/apotek?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"apotek"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Animals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/djur?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"djur"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Kiosk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/kiosk?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"kiosk"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lotteries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"}); \r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/lotter?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"lotter"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "First undercategories",
			"item": [
				{
					"name": "Fruit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/frukt-och-gront/frukt?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"frukt-och-gront",
								"frukt"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sausage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/kott-chark-och-fagel/korv?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"kott-chark-och-fagel",
								"korv"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cheese",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/mejeri-ost-och-agg/ost?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"mejeri-ost-och-agg",
								"ost"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Canned food",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/skafferi/konserver-och-burkar?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"skafferi",
								"konserver-och-burkar"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crackers and cookies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/kex-och-kakor?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"kex-och-kakor"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Portioned dishes and fastfood",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/fryst/portionsratter-och-snabblagat?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"fryst",
								"portionsratter-och-snabblagat"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Caviar and rum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/fisk-och-skaldjur/kaviar-och-rom?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"fisk-och-skaldjur",
								"kaviar-och-rom"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tofu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/vegetariskt?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"vegetariskt"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Chocolate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/glass-godis-och-snacks/choklad?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"glass-godis-och-snacks",
								"choklad"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Coffee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/dryck/kaffe?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"dryck",
								"kaffe"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Second undercategories",
			"item": [
				{
					"name": "Fish-and-seafood",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									" pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/skafferi/konserver-och-burkar/fisk-och-skaldjurskonserver?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"skafferi",
								"konserver-och-burkar",
								"fisk-och-skaldjurskonserver"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pasta, rice and groats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/skafferi/pasta-ris-och-matgryn?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"skafferi",
								"pasta-ris-och-matgryn"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Third undercategories",
			"item": [
				{
					"name": "Pasta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Correct number of results per page\", function () {\r",
									"    const resultsPerPage = 31;\r",
									"    const jsonData = pm.response.json();\r",
									"    const results = jsonData.results.length;\r",
									"    pm.expect(results).lessThan(resultsPerPage);\r",
									"})\r",
									"let responseData = pm.response.json();\r",
									"pm.test('There should be at least one product in a main category', () => {\r",
									"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/skafferi/pasta-ris-och-matgryn/pasta?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"skafferi",
								"pasta-ris-och-matgryn",
								"pasta"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sorting manual tests",
			"item": [
				{
					"name": "Sorting A-Ö",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=name-asc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "name-asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting Ö-A",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=name-desc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "name-desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting Price Cheap-Expensive",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=price-asc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "price-asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting Price Expensive-Cheap",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=price-desc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "price-desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting Compareprice Cheap-Expensive",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=compareprice-asc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "compareprice-asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting Compareprice Expensive-Cheap",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/brod-och-kakor/brod/baguetter-och-losbrod?size=30&page=0&sort=compareprice-desc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"brod-och-kakor",
								"brod",
								"baguetter-och-losbrod"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "compareprice-desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "These are manual tests since we could not find a proper way to automatically test sorting."
		},
		{
			"name": "Comparing prices",
			"item": [
				{
					"name": "Compare price Baguette",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"If compareprice is accurate\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const compare = responseData.comparePrice.slice(0,5)\r",
									"    const comparePrice = parseFloat(compare)+0.91\r",
									"    const weight = responseData.displayVolume.slice(0,2)\r",
									"    const volume = parseFloat(weight)/1000\r",
									"    const total = comparePrice*volume\r",
									"    const price = responseData.priceValue\r",
									"    pm.expect(total.toFixed(1)).to.equal(price.toFixed(1))\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/axfood/rest/p/101289910_ST",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"axfood",
								"rest",
								"p",
								"101289910_ST"
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare price Sausage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"If compareprice is accurate\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const compare = responseData.comparePrice.slice(0,5)\r",
									"    const comparePrice = parseFloat(compare)+0.13\r",
									"    const weight = responseData.displayVolume.slice(0,2)\r",
									"    const volume = parseFloat(weight)/100\r",
									"    const total = comparePrice*volume\r",
									"    const price = responseData.priceValue\r",
									"    pm.expect(total.toFixed(1)).to.equal(price.toFixed(1))\r",
									"     \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/axfood/rest/p/100008803_ST",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"axfood",
								"rest",
								"p",
								"100008803_ST"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Visibility product content",
			"item": [
				{
					"name": "Grapes content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"pm.test(\"Check if Grapes have a description\", function () {\r",
									"    const description = responseData.description\r",
									"    pm.expect(description.length).to.be.greaterThan(0)\r",
									"    });\r",
									"\r",
									"pm.test(\"Check if Grapes have a picture\", function () {\r",
									"    const image = responseData.image.url\r",
									"     pm.expect(image.length).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if Grapes have a name\", function () {\r",
									"    const name = responseData.name\r",
									"     pm.expect(name.length).to.be.greaterThan(0)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/axfood/rest/p/100008803_ST",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"axfood",
								"rest",
								"p",
								"100008803_ST"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lotteries content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"pm.test(\"Check if Sverige lotten does not have a description\", function () {\r",
									"    const description = responseData.description\r",
									"    pm.expect(description.length).to.equals(0)\r",
									"    });\r",
									"\r",
									"pm.test(\"Check if Sverige lotten have a picture\", function () {\r",
									"    const image = responseData.image.url\r",
									"     pm.expect(image.length).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if Sverige lotten have a name\", function () {\r",
									"    const name = responseData.name\r",
									"     pm.expect(name.length).to.be.greaterThan(0)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/axfood/rest/p/100010710_ST",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"axfood",
								"rest",
								"p",
								"100010710_ST"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sunflower seeds content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"pm.test(\"Check if Solrosfrön have a description\", function () {\r",
									"    const description = responseData.description\r",
									"    pm.expect(description.length).to.be.greaterThan(0)\r",
									"    });\r",
									"\r",
									"pm.test(\"Check if Solrosfrön have a picture\", function () {\r",
									"    const image = responseData.image.url\r",
									"     pm.expect(image.length).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if Solrosfrön have a name\", function () {\r",
									"    const name = responseData.name\r",
									"     pm.expect(name.length).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if Solrosfrön have storage instructions\", function () {\r",
									"   const storageInstructions = responseData.consumerStorageInstructions\r",
									"   pm.expect(storageInstructions.length).to.be.greaterThan(0)\r",
									"})\r",
									"\r",
									"pm.test(\"Check if Solrosfrön have ingredients\", function () {\r",
									"    const ingredients = responseData.ingredients\r",
									"     pm.expect(ingredients.length).to.be.greaterThan(0)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/axfood/rest/p/101263458_ST",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"axfood",
								"rest",
								"p",
								"101263458_ST"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests to see if products have a name, text and picture"
		},
		{
			"name": "Visibility in produclist",
			"item": [
				{
					"name": "Coffee list visibilty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if Coffee list show a name, price and picture\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    for(i=0; i<responseData.results.length; i++){\r",
									"        const price = responseData.results[i].price\r",
									"        const name = responseData.results[i].name\r",
									"        const image = responseData.results[i].image.url\r",
									"        pm.expect(price.length).to.be.greaterThan(0)\r",
									"        pm.expect(name.length).to.be.greaterThan(0)\r",
									"        pm.expect(image.length).to.be.greaterThan(0)\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/dryck/kaffe?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"dryck",
								"kaffe"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cassler list visibility",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if Coffee list show a name, price and picture\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    for(i=0; i<responseData.results.length; i++){\r",
									"        const price = responseData.results[i].price\r",
									"        const name = responseData.results[i].name\r",
									"        const image = responseData.results[i].image.url\r",
									"        pm.expect(price.length).to.be.greaterThan(0)\r",
									"        pm.expect(name.length).to.be.greaterThan(0)\r",
									"        pm.expect(image.length).to.be.greaterThan(0)\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/c/kott-chark-och-fagel/kott/kassler?size=30&page=0&sort=topRated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"c",
								"kott-chark-och-fagel",
								"kott",
								"kassler"
							],
							"query": [
								{
									"key": "size",
									"value": "30"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "topRated"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Testing if products in productlist shows a name, a pricture and a price"
		}
	]
}